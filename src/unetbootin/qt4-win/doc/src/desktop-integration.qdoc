/****************************************************************************
**
** Copyright (C) 2006-2008 Trolltech ASA. All rights reserved.
**
** This file is part of the documentation of the Qt Toolkit.
**
** This file may be used under the terms of the GNU General Public
** License versions 2.0 or 3.0 as published by the Free Software
** Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
** included in the packaging of this file.  Alternatively you may (at
** your option) use any later version of the GNU General Public
** License if such license has been publicly approved by Trolltech ASA
** (or its successors, if any) and the KDE Free Qt Foundation. In
** addition, as a special exception, Trolltech gives you certain
** additional rights. These rights are described in the Trolltech GPL
** Exception version 1.2, which can be found at
** http://www.trolltech.com/products/qt/gplexception/ and in the file
** GPL_EXCEPTION.txt in this package.
**
** Please review the following information to ensure GNU General
** Public Licensing requirements will be met:
** http://trolltech.com/products/qt/licenses/licensing/opensource/. If
** you are unsure which license is appropriate for your use, please
** review the following information:
** http://trolltech.com/products/qt/licenses/licensing/licensingoverview
** or contact the sales department at sales@trolltech.com.
**
** In addition, as a special exception, Trolltech, as the sole
** copyright holder for Qt Designer, grants users of the Qt/Eclipse
** Integration plug-in the right for the Qt/Eclipse Integration to
** link to functionality provided by Qt Designer and its related
** libraries.
**
** This file is provided "AS IS" with NO WARRANTY OF ANY KIND,
** INCLUDING THE WARRANTIES OF DESIGN, MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE. Trolltech reserves all rights not expressly
** granted herein.
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
****************************************************************************/

/*!
  \page desktop-integration.html
  \title Desktop Integration
  \ingroup gui-programming

  Various classes in Qt are designed to help developers integrate applications into
  users' desktop environments. These classes enable developers to take advantage
  of native services while still using a cross-platform API.

  \tableofcontents

  \section1 Opening External Resources

  Although Qt provides facilities to handle and display resources, such as
  \l{QImageIOHandler}{common image formats} and \l{QTextDocument}{HTML},
  it is sometimes necessary to open files and external resources using external
  applications.

  QDesktopServices provides an interface to services offered by the user's desktop
  environment. In particular, the \l{QDesktopServices::}{openUrl()} function is
  used to open resources using the appropriate application, which may have been
  specifically configured by the user.

  \section1 System Tray Icons

  Many modern desktop environments feature docks or panels with \e{system trays}
  in which applications can install icons. Applications often use system tray icons
  to display status information, either by updating the icon itself or by showing
  information in "balloon messages". Additionally, many applications provide
  pop-up menus that can be accessed via their system tray icons.

  The QSystemTrayIcon class exposes all of the above features via an intuitive
  Qt-style API that can be used on all desktop platforms.

  \section1 Desktop Widgets

  On systems where the user's desktop is displayed using more than one screen,
  certain types of applications may need to obtain information about the
  configuration of the user's workspace to ensure that new windows and dialogs
  are opened in appropriate locations.

  The QDesktopWidget class can be used to monitor the positions of widgets and
  notify applications about changes to the way the desktop is split over the
  available screens. This enables applications to implement policies for
  positioning new windows so that, for example, they do not distract a user
  who is working on a specific task.


*/
