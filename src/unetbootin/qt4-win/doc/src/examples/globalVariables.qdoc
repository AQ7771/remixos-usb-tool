/****************************************************************************
**
** Copyright (C) 2007-2008 Trolltech ASA. All rights reserved.
**
** This file is part of the documentation of the Qt Toolkit.
**
** This file may be used under the terms of the GNU General Public
** License versions 2.0 or 3.0 as published by the Free Software
** Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
** included in the packaging of this file.  Alternatively you may (at
** your option) use any later version of the GNU General Public
** License if such license has been publicly approved by Trolltech ASA
** (or its successors, if any) and the KDE Free Qt Foundation. In
** addition, as a special exception, Trolltech gives you certain
** additional rights. These rights are described in the Trolltech GPL
** Exception version 1.2, which can be found at
** http://www.trolltech.com/products/qt/gplexception/ and in the file
** GPL_EXCEPTION.txt in this package.
**
** Please review the following information to ensure GNU General
** Public Licensing requirements will be met:
** http://trolltech.com/products/qt/licenses/licensing/opensource/. If
** you are unsure which license is appropriate for your use, please
** review the following information:
** http://trolltech.com/products/qt/licenses/licensing/licensingoverview
** or contact the sales department at sales@trolltech.com.
**
** In addition, as a special exception, Trolltech, as the sole
** copyright holder for Qt Designer, grants users of the Qt/Eclipse
** Integration plug-in the right for the Qt/Eclipse Integration to
** link to functionality provided by Qt Designer and its related
** libraries.
**
** This file is provided "AS IS" with NO WARRANTY OF ANY KIND,
** INCLUDING THE WARRANTIES OF DESIGN, MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE. Trolltech reserves all rights not expressly
** granted herein.
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
****************************************************************************/

/*!
    \example xmlpatterns/xquery/globalVariables
    \title C++ Source Code Analyzer Example

    The C++ source code analyzer example shows how to
    write a real world XQuery query.

    \section1 Overview

    Sometimes it is of use to analyze C++ code, in order to find
    common mistakes & patterns. For that one can use search & text
    utilites like \c grep on UNIX, or try to write ones own C++ parser
    and subsequently do search there.

    But what if there were a simpler but still as correct approach?

    g++, the open source C++ compiler, has an extension called GCC-XML that
    outputs the declarations in a compilation unit(a C++ file) in XML. Since
    that "C++ to XML" conversion is done with GCC itself, it means the parsing
    of the C++ code is done with one of the best C++ parsers on this planet.

    Once the C++ is in XML, a query can swiftly navigate it to
    produce a report.

    \section1 Global variables

    Usually one wants to avoid global mutable variables in C++, since they have
    a state globally and therefore often is a source to bugs, especially related
    to threading. 

    For instance, in globals.cpp, the global, mutable integers as
    well as the global class instances should preferrably be avoided:

    \quotefromfile examples/xmlpatterns/xquery/globalVariables/globals.cpp
    \printuntil

 */
